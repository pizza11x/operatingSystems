int:  M = 4; //Numero di pinte
int:  N = 6; //Numero di avventori
bool:  pinte[M] = [false, false,false, false]; //Array di pinte inizializzato a false in quanto sono tutte vuote
mutex: mutBancone;
semaphore cont: semStart = N;
semaphore bin: semAwaitRestart = 1;
int: indexCurrPinta = 0;

processo avventori(){
    bool hasConsume;
    int lvlUbriachezza = 0;
    while(lvlUbriachezza < 3){
        hasConsume = false;
        wait(semStart);
        lock(mutBancone);
            if(indexCurrPinta < M){
                //Consumo la prima pinta disponibile
                pinte[indexCurrPinta] = false
                hasConsume = true;
                indexCurrPinta++;
                //Se le pinte sono terminate l'avventore segnala di poter ricominciare il giro
                if(indexCurrPinta == M){
                    signal(semAwaitRestart)
                }
            }
        unlock(mutBancone);
        //Aumenta il livello di ubriachezza del singolo avventore se ha consumato
        if(hasConsume){
            lvlUbriachezza++;
        }
    }
}

processo oste(){
    while(true){
        //Riempie le pinte
        riempimentoPinte();
        //Da il via
        kickOff();
        //Aspetta che tutti gli avventori finiscono
        wait(semAwaitRestart);
    }
}

fun riempimentoPinte(){
    //Utilizzo l'array di pinte per riempirlo, in questo caso non devo proteggere l'accesso in quanto sarÃ  l'oste a dover dar il via 
    for (i = 0 to M-1){
       //Riempio la pinta
       pinta[i] = true;
    }
}

fun kickOff(){
    //Do il via a tutti gli avventori che stavano aspettando
    for(i = 0 to N){
        signal(semStart);
    }
}